public class All_Permutations_Of_String_Using_Backtracking {	
	
	int count=0;
	public int stringPermutations(String str, int j) {
		// Base case
		if(str.length()-1 == j) {
			System.out.println(str);
			count++;
			return 0;
		} 
		for(int i=j; i<str.length(); i++) {
			str = swap(str, i, j);
			stringPermutations(str, j+1);
			str = swap(str, i, j);       // important step in backtracking (retain original state)
		}
	    return count;
	}
	public String swap(String str, int i, int j) {
		char ch [] = str.toCharArray();
		char temp = ch[i];
		    ch[i] = ch[j];
		    ch[j] = temp;
		    return String.valueOf(ch); 
	}

	public static void main(String[] args) {
		All_Permutations_Of_String_Using_Backtracking ob = 
				                    new All_Permutations_Of_String_Using_Backtracking();
		String str = "ABCD";
		System.out.println("Total Permutations: "+ob.stringPermutations(str, 0));	
	}
}
