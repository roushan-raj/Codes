import java.util.*;
public class Q32_LargestSubArrayWithEqualNoof_0_1 {
	
	public static int largestSubArray(int arr[], int n) {
		
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

		int sum = 0;
		int maxl = 0;
		int e_ind = -1;
		
		for (int i = 0; i < n; i++) {
			arr[i] = (arr[i] == 0) ? -1 : 1;
		}

		for (int i = 0; i < n; i++) {
			
			sum += arr[i];

			if (sum == 0) {
				maxl = i + 1;
				e_ind = i;
			}

			if (map.containsKey(sum)) {
				if (maxl < i - map.get(sum)) {
					maxl = i - map.get(sum);
					e_ind = i;
				}
			}
			else 
				map.put(sum, i);
		}

		for (int i = 0; i < n; i++) {
			arr[i] = (arr[i] == -1) ? 0 : 1;
		}

		int end = e_ind - maxl + 1;
      
      if(e_ind-end+1 > 0){
           System.out.println(e_ind-end+1);
      }
      else{
           System.out.println(-1);
      }

		return maxl;
	}

	public static void main(String[] args) {
		int arr[] = {1, 1, 0, 1, 1};
		int n = arr.length;
		
		System.out.println(largestSubArray(arr, n));
	}
}


//import java.util.*;
//import java.lang.*;
//import java.io.*;
//public class Main
//{
//  public static void main (String[] args) throws java.lang.Exception
//  {
//    Scanner sc = new Scanner(System.in);
//    int n = sc.nextInt();
//    int[] arr = new int[n];
//    for(int i=0;i<n;i++){
//            arr[i]=sc.nextInt();
//        }
//        int ans = max_length(arr,n);
//        System.out.println(ans);
//        
//  }
//  
//  public static int max_length(int[] arr,int n){
//    Map<Integer, Integer> m = new HashMap<>();
//      int mx = 0, cnt = 0;
//      for(int i = 0;i < arr.length;i++) {
//        cnt+=(arr[i] == 1)?1:-1;
//        if(cnt == 0)
//          mx = Math.max(mx, i+1);        
//        if(m.containsKey(cnt)) {
//          mx = Math.max(mx, i - m.get(cnt));
//        } else 
//          m.put(cnt, i);
//      }
//      return mx;
//  }
//}